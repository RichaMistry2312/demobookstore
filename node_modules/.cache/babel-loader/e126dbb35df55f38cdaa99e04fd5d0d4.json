{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\nfunction lookahead() {\n  var token = this.token;\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\nfunction printCharCode(code) {\n  return (\n    // NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF :\n    // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) :\n    // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n      return readString(source, pos, line, col, prev);\n  }\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && (\n  // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n    position = readDigits(source, position, code);\n  }\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n    return position;\n  }\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&\n  // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n    ++position;\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n        case 47:\n          value += '/';\n          break;\n        case 92:\n          value += '\\\\';\n          break;\n        case 98:\n          value += '\\b';\n          break;\n        case 102:\n          value += '\\f';\n          break;\n        case 110:\n          value += '\\n';\n          break;\n        case 114:\n          value += '\\r';\n          break;\n        case 116:\n          value += '\\t';\n          break;\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n      ++position;\n      chunkStart = position;\n    }\n  }\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    } // Escape Triple-Quote (\\\"\"\")\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 ||\n  // _\n  code >= 48 && code <= 57 ||\n  // 0-9\n  code >= 65 && code <= 90 ||\n  // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","map":{"version":3,"names":["syntaxError","blockStringValue","createLexer","source","options","startOfFileToken","Tok","TokenKind","SOF","lexer","lastToken","token","line","lineStart","advance","advanceLexer","lookahead","kind","EOF","next","readToken","COMMENT","Object","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","getTokenDesc","value","concat","charCodeAt","String","prototype","slice","start","end","column","prev","toJSON","inspect","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toString","toUpperCase","body","bodyLength","length","pos","positionAfterWhitespace","col","call","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","a","b","c","d","char2hex"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/language/lexer.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}