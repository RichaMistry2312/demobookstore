{"ast":null,"code":"import { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nvar S3RequestPresigner = /** @class */function () {\n  function S3RequestPresigner(options) {\n    var resolvedOptions = __assign({\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false\n    }, options);\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n  S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n    var _b = _a.unsignableHeaders,\n      unsignableHeaders = _b === void 0 ? new Set() : _b,\n      options = __rest(_a, [\"unsignableHeaders\"]);\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        unsignableHeaders.add(\"content-type\");\n        requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n        return [2 /*return*/, this.signer.presign(requestToSign, __assign({\n          expiresIn: 900,\n          unsignableHeaders: unsignableHeaders\n        }, options))];\n      });\n    });\n  };\n  return S3RequestPresigner;\n}();\nexport { S3RequestPresigner };","map":{"version":3,"names":["SignatureV4","SHA256_HEADER","UNSIGNED_PAYLOAD","S3RequestPresigner","options","resolvedOptions","__assign","service","signingName","uriEscapePath","signer","prototype","presign","requestToSign","_a","_b","unsignableHeaders","Set","__rest","add","headers","expiresIn"],"sources":["../../src/presigner.ts"],"sourcesContent":["import { SignatureV4, SignatureV4CryptoInit, SignatureV4Init } from \"@aws-sdk/signature-v4\";\nimport { RequestPresigner, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { HttpRequest as IHttpRequest } from \"@aws-sdk/types\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * PartialBy<T, K> makes properties specified in K optional in interface T\n * see: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\n * */\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type S3RequestPresignerOptions = PartialBy<\n  SignatureV4Init & SignatureV4CryptoInit,\n  \"service\" | \"uriEscapePath\"\n> & { signingName?: string };\n\nexport class S3RequestPresigner implements RequestPresigner {\n  private readonly signer: SignatureV4;\n  constructor(options: S3RequestPresignerOptions) {\n    const resolvedOptions = {\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false,\n      ...options,\n    };\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  public async presign(\n    requestToSign: IHttpRequest,\n    { unsignableHeaders = new Set(), ...options }: RequestPresigningArguments = {}\n  ): Promise<IHttpRequest> {\n    unsignableHeaders.add(\"content-type\");\n    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n    return this.signer.presign(requestToSign, {\n      expiresIn: 900,\n      unsignableHeaders,\n      ...options,\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,WAAW,QAAgD,uBAAuB;AAI3F,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,aAAa;AAc7D,IAAAC,kBAAA;EAEE,SAAAA,mBAAYC,OAAkC;IAC5C,IAAMC,eAAe,GAAAC,QAAA;MACnB;MACA;MACAC,OAAO,EAAEH,OAAO,CAACI,WAAW,IAAIJ,OAAO,CAACG,OAAO,IAAI,IAAI;MACvDE,aAAa,EAAEL,OAAO,CAACK,aAAa,IAAI;IAAK,GAC1CL,OAAO,CACX;IACD,IAAI,CAACM,MAAM,GAAG,IAAIV,WAAW,CAACK,eAAe,CAAC;EAChD;EAEaF,kBAAA,CAAAQ,SAAA,CAAAC,OAAO,GAApB,UACEC,aAA2B,EAC3BC,EAA8E;IAA9E,IAAAA,EAAA;MAAAA,EAAA,KAA8E;IAAA;IAA5E,IAAAC,EAAA,GAAAD,EAAA,CAAAE,iBAA6B;MAA7BA,iBAAiB,GAAAD,EAAA,cAAG,IAAIE,GAAG,EAAE,GAAAF,EAAA;MAAKX,OAAO,GAAAc,MAAA,CAAAJ,EAAA,EAA3C,qBAA6C,CAAF;;;QAE3CE,iBAAiB,CAACG,GAAG,CAAC,cAAc,CAAC;QACrCN,aAAa,CAACO,OAAO,CAACnB,aAAa,CAAC,GAAGC,gBAAgB;QACvD,sBAAO,IAAI,CAACQ,MAAM,CAACE,OAAO,CAACC,aAAa,EAAAP,QAAA;UACtCe,SAAS,EAAE,GAAG;UACdL,iBAAiB,EAAAA;QAAA,GACdZ,OAAO,EACV;;;GACH;EACH,OAAAD,kBAAC;AAAD,CAAC,CAzBD","ignoreList":[]},"metadata":{},"sourceType":"module"}