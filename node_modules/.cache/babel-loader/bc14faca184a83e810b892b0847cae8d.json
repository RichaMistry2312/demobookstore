{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n\n  throw new Error(\"Unexpected type kind: \".concat(typeNode.kind, \".\"));\n}","map":{"version":3,"names":["Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value","Error","concat"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/utilities/typeFromAST.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unexpected type kind: \".concat(typeNode.kind, \".\"));\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,mBAAmB;AACxC,SAASC,WAAW,EAAEC,cAAc,QAAQ,oBAAoB;AAChE,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAC5C;EACA,IAAIC,SAAS;EAEb,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACQ,SAAS,EAAE;IACpCF,SAAS,GAAGH,WAAW,CAACC,MAAM,EAAEC,QAAQ,CAACI,IAAI,CAAC;IAC9C,OAAOH,SAAS,IAAIL,WAAW,CAACK,SAAS,CAAC;EAC5C;EAEA,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACU,aAAa,EAAE;IACxCJ,SAAS,GAAGH,WAAW,CAACC,MAAM,EAAEC,QAAQ,CAACI,IAAI,CAAC;IAC9C,OAAOH,SAAS,IAAIJ,cAAc,CAACI,SAAS,CAAC;EAC/C;EAEA,IAAID,QAAQ,CAACE,IAAI,KAAKP,IAAI,CAACW,UAAU,EAAE;IACrC,OAAOP,MAAM,CAACQ,OAAO,CAACP,QAAQ,CAACQ,IAAI,CAACC,KAAK,CAAC;EAC5C;EACA;;EAGA,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAACC,MAAM,CAACX,QAAQ,CAACE,IAAI,EAAE,GAAG,CAAC,CAAC;AACtE","ignoreList":[]},"metadata":{},"sourceType":"module"}