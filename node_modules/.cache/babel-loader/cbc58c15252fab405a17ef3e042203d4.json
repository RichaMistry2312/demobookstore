{"ast":null,"code":"import { exhaustiveCheck } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */function () {\n  function Predicates() {}\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */function () {\n  function ModelPredicateCreator() {}\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              };\n              // Create a new recorder\n              var tmpPredicateRecorder = new Proxy({}, handler);\n              // Set the recorder group\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group);\n              // Apply the predicates to the recorder (this is the step that records the changes)\n              newPredicate(tmpPredicateRecorder);\n              // Push the group to the top-level recorder\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n            return result_1;\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  // transforms cb-style predicate into Proxy\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelPredicateCreator.createForId = function (modelDefinition, id) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition).id('eq', id);\n  };\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\nexport { ModelPredicateCreator };","map":{"version":3,"names":["exhaustiveCheck","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","PredicateAll","Symbol","Predicates","Object","defineProperty","get","c","add","ModelPredicateCreator","createPredicateBuilder","modelDefinition","modelName","name","fieldNames","Set","keys","fields","handler","Proxy","_target","propertyKey","receiver","groupType","result_1","newPredicate","group","type","predicates","tmpPredicateRecorder","predicateGroupsMap","set","push","field","Error","result","operator","operand","isValidPredicate","getPredicates","throwOnInvalid","createFromExisting","existing","undefined","createForId","id","WeakMap"],"sources":["../../src/predicates/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}