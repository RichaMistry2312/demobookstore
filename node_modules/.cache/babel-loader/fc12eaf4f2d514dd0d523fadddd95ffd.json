{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateDirectiveMessage(directiveName) {\n  return \"The directive \\\"\".concat(directiveName, \"\\\" can only be used once at \") + 'this location.';\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = directives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var directive = _step.value;\n            var directiveName = directive.name.value;\n            if (knownDirectives[directiveName]) {\n              context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n            } else {\n              knownDirectives[directiveName] = directive;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateDirectiveMessage","directiveName","concat","UniqueDirectivesPerLocation","context","enter","node","directives","knownDirectives","Object","create","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","directive","value","name","reportError","err","return"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateDirectiveMessage(directiveName) {\n  return \"The directive \\\"\".concat(directiveName, \"\\\" can only be used once at \") + 'this location.';\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = directives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var directive = _step.value;\n            var directiveName = directive.name.value;\n\n            if (knownDirectives[directiveName]) {\n              context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n            } else {\n              knownDirectives[directiveName] = directive;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,yBAAyBA,CAACC,aAAa,EAAE;EACvD,OAAO,kBAAkB,CAACC,MAAM,CAACD,aAAa,EAAE,8BAA8B,CAAC,GAAG,gBAAgB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,2BAA2BA,CAACC,OAAO,EAAE;EACnD,OAAO;IACL;IACA;IACA;IACAC,KAAK,EAAE,SAASA,KAAKA,CAACC,IAAI,EAAE;MAC1B;MACA,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAU;MAEhC,IAAIA,UAAU,EAAE;QACd,IAAIC,eAAe,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACzC,IAAIC,yBAAyB,GAAG,IAAI;QACpC,IAAIC,iBAAiB,GAAG,KAAK;QAC7B,IAAIC,cAAc,GAAGC,SAAS;QAE9B,IAAI;UACF,KAAK,IAAIC,SAAS,GAAGR,UAAU,CAACS,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAEC,KAAK,EAAE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAI,CAAC,CAAC,EAAEC,IAAI,CAAC,EAAET,yBAAyB,GAAG,IAAI,EAAE;YAC3J,IAAIU,SAAS,GAAGH,KAAK,CAACI,KAAK;YAC3B,IAAIrB,aAAa,GAAGoB,SAAS,CAACE,IAAI,CAACD,KAAK;YAExC,IAAId,eAAe,CAACP,aAAa,CAAC,EAAE;cAClCG,OAAO,CAACoB,WAAW,CAAC,IAAIzB,YAAY,CAACC,yBAAyB,CAACC,aAAa,CAAC,EAAE,CAACO,eAAe,CAACP,aAAa,CAAC,EAAEoB,SAAS,CAAC,CAAC,CAAC;YAC9H,CAAC,MAAM;cACLb,eAAe,CAACP,aAAa,CAAC,GAAGoB,SAAS;YAC5C;UACF;QACF,CAAC,CAAC,OAAOI,GAAG,EAAE;UACZb,iBAAiB,GAAG,IAAI;UACxBC,cAAc,GAAGY,GAAG;QACtB,CAAC,SAAS;UACR,IAAI;YACF,IAAI,CAACd,yBAAyB,IAAII,SAAS,CAACW,MAAM,IAAI,IAAI,EAAE;cAC1DX,SAAS,CAACW,MAAM,CAAC,CAAC;YACpB;UACF,CAAC,SAAS;YACR,IAAId,iBAAiB,EAAE;cACrB,MAAMC,cAAc;YACtB;UACF;QACF;MACF;IACF;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}