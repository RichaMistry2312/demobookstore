{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return \"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), [node.type]));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isInputType","typeFromAST","nonInputTypeOnVarMessage","variableName","typeName","concat","VariablesAreInputTypes","context","VariableDefinition","node","type","getSchema","variable","name","value","reportError"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/validation/rules/VariablesAreInputTypes.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return \"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), [node.type]));\n      }\n    }\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,OAAO,SAASC,wBAAwBA,CAACC,YAAY,EAAEC,QAAQ,EAAE;EAC/D,OAAO,cAAc,CAACC,MAAM,CAACF,YAAY,EAAE,gCAAgC,CAAC,CAACE,MAAM,CAACD,QAAQ,EAAE,KAAK,CAAC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,sBAAsBA,CAACC,OAAO,EAAE;EAC9C,OAAO;IACLC,kBAAkB,EAAE,SAASA,kBAAkBA,CAACC,IAAI,EAAE;MACpD,IAAIC,IAAI,GAAGT,WAAW,CAACM,OAAO,CAACI,SAAS,CAAC,CAAC,EAAEF,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;;MAExD,IAAIA,IAAI,IAAI,CAACV,WAAW,CAACU,IAAI,CAAC,EAAE;QAC9B,IAAIP,YAAY,GAAGM,IAAI,CAACG,QAAQ,CAACC,IAAI,CAACC,KAAK;QAC3CP,OAAO,CAACQ,WAAW,CAAC,IAAIjB,YAAY,CAACI,wBAAwB,CAACC,YAAY,EAAEJ,KAAK,CAACU,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE,CAACD,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;MAC9G;IACF;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}