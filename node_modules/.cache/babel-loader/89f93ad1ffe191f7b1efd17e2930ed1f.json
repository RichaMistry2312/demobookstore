{"ast":null,"code":"/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport WordArray from './utils/WordArray';\nvar randomBytes = function randomBytes(nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n};\nimport BigInteger from './BigInteger';\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n/** @class */\n\nvar AuthenticationHelper = /*#__PURE__*/function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash(\"00\" + this.N.toString(16) + \"0\" + this.g.toString(16)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n\n  var _proto = AuthenticationHelper.prototype;\n  _proto.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  }\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */;\n  _proto.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  }\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */;\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16);\n    var smallABigInt = randomBigInt.mod(this.N);\n    return smallABigInt;\n  }\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */;\n  _proto.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  }\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */;\n  _proto.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  }\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */;\n  _proto.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n  /**\n   * @returns {string} Value used to verify devices.\n   */;\n  _proto.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  }\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */;\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n    this.randomPassword = this.generateRandomString();\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex');\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  }\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */;\n  _proto.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n      callback(null, A);\n    });\n  }\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */;\n  _proto.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  }\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */;\n  _proto.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  }\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */;\n  _proto.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  }\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */;\n  _proto.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  }\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */;\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue.toString(16)), 'hex'));\n      callback(null, hkdf);\n    });\n  }\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  }\n  /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */;\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n  /**\n   * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n   * @param {BigInteger|String} bigInt Number or string to pad.\n   * @returns {String} Padded hex string.\n   */;\n  _proto.padHex = function padHex(bigInt) {\n    var hashStr = bigInt.toString(16);\n    if (hashStr.length % 2 === 1) {\n      hashStr = \"0\" + hashStr;\n    } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n      hashStr = \"00\" + hashStr;\n    }\n    return hashStr;\n  };\n  return AuthenticationHelper;\n}();\nexport { AuthenticationHelper as default };","map":{"version":3,"names":["Buffer","CryptoJS","SHA256","HmacSHA256","WordArray","randomBytes","nBytes","from","random","toString","BigInteger","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","g","k","hexHash","smallAValue","generateRandomSmallA","getLargeAValue","infoBits","poolName","_proto","prototype","getSmallAValue","callback","_this","largeAValue","calculateA","err","hexRandom","randomBigInt","smallABigInt","mod","generateRandomString","getRandomPassword","randomPassword","getSaltDevices","SaltToHashDevices","getVerifierDevices","verifierDevices","generateHashDevice","deviceGroupKey","username","_this2","combinedString","hashedString","hash","padHex","modPow","verifierDevicesNotPadded","a","_this3","A","equals","ZERO","Error","calculateU","B","UHexHash","finalU","buf","str","lib","create","hashHex","Array","length","join","hexStr","computehkdf","ikm","salt","infoBitsWordArray","concat","String","fromCharCode","ikmWordArray","saltWordArray","prk","hmac","slice","getPasswordAuthenticationKey","password","serverBValue","_this4","UValue","usernamePassword","usernamePasswordHash","xValue","calculateS","sValue","hkdf","_this5","gModPowXN","intValue2","subtract","multiply","add","err2","result","getNewPasswordRequiredChallengeUserAttributePrefix","bigInt","hashStr","indexOf","default"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js"],"sourcesContent":["/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport WordArray from './utils/WordArray';\n\nvar randomBytes = function randomBytes(nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n};\n\nimport BigInteger from './BigInteger';\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n/** @class */\n\nvar AuthenticationHelper = /*#__PURE__*/function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash(\"00\" + this.N.toString(16) + \"0\" + this.g.toString(16)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n\n\n  var _proto = AuthenticationHelper.prototype;\n\n  _proto.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  }\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */\n  ;\n\n  _proto.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  }\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n  ;\n\n  _proto.generateRandomSmallA = function generateRandomSmallA() {\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16);\n    var smallABigInt = randomBigInt.mod(this.N);\n    return smallABigInt;\n  }\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n  ;\n\n  _proto.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  }\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  ;\n\n  _proto.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  }\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  ;\n\n  _proto.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  ;\n\n  _proto.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  }\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */\n  ;\n\n  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n\n    this.randomPassword = this.generateRandomString();\n    var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex');\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  }\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n\n      callback(null, A);\n    });\n  }\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n  ;\n\n  _proto.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  }\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  ;\n\n  _proto.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  }\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  ;\n\n  _proto.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  }\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n  ;\n\n  _proto.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  }\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */\n  ;\n\n  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n\n    var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue.toString(16)), 'hex'));\n\n      callback(null, hkdf);\n    });\n  }\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  }\n  /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */\n  ;\n\n  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  }\n  /**\n   * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n   * @param {BigInteger|String} bigInt Number or string to pad.\n   * @returns {String} Padded hex string.\n   */\n  ;\n\n  _proto.padHex = function padHex(bigInt) {\n    var hashStr = bigInt.toString(16);\n\n    if (hashStr.length % 2 === 1) {\n      hashStr = \"0\" + hashStr;\n    } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n      hashStr = \"00\" + hashStr;\n    }\n\n    return hashStr;\n  };\n\n  return AuthenticationHelper;\n}();\n\nexport { AuthenticationHelper as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}