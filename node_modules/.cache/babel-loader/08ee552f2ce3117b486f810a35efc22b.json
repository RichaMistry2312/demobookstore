{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node;\n            variableNameUsed[node.name.value] = true;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        for (var _i = 0; _i < variableDefs.length; _i++) {\n          var variableDef = variableDefs[_i];\n          var variableName = variableDef.variable.name.value;\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","unusedVariableMessage","varName","opName","concat","NoUnusedVariables","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","name","value","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_ref2","node","err","return","_i","length","variableDef","variableName","variable","reportError","VariableDefinition","def","push"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/validation/rules/NoUnusedVariables.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node;\n            variableNameUsed[node.name.value] = true;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        for (var _i = 0; _i < variableDefs.length; _i++) {\n          var variableDef = variableDefs[_i];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,qBAAqBA,CAACC,OAAO,EAAEC,MAAM,EAAE;EACrD,OAAOA,MAAM,GAAG,cAAc,CAACC,MAAM,CAACF,OAAO,EAAE,kCAAkC,CAAC,CAACE,MAAM,CAACD,MAAM,EAAE,KAAK,CAAC,GAAG,cAAc,CAACC,MAAM,CAACF,OAAO,EAAE,mBAAmB,CAAC;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,iBAAiBA,CAACC,OAAO,EAAE;EACzC,IAAIC,YAAY,GAAG,EAAE;EACrB,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAK,EAAE,SAASA,KAAKA,CAAA,EAAG;QACtBF,YAAY,GAAG,EAAE;MACnB,CAAC;MACDG,KAAK,EAAE,SAASA,KAAKA,CAACC,SAAS,EAAE;QAC/B,IAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QAC1C,IAAIC,MAAM,GAAGT,OAAO,CAACU,0BAA0B,CAACL,SAAS,CAAC;QAC1D,IAAIR,MAAM,GAAGQ,SAAS,CAACM,IAAI,GAAGN,SAAS,CAACM,IAAI,CAACC,KAAK,GAAG,IAAI;QACzD,IAAIC,yBAAyB,GAAG,IAAI;QACpC,IAAIC,iBAAiB,GAAG,KAAK;QAC7B,IAAIC,cAAc,GAAGC,SAAS;QAE9B,IAAI;UACF,KAAK,IAAIC,SAAS,GAAGR,MAAM,CAACS,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAEC,KAAK,EAAE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAI,CAAC,CAAC,EAAEC,IAAI,CAAC,EAAET,yBAAyB,GAAG,IAAI,EAAE;YACvJ,IAAIU,KAAK,GAAGH,KAAK,CAACR,KAAK;YACvB,IAAIY,IAAI,GAAGD,KAAK,CAACC,IAAI;YACrBlB,gBAAgB,CAACkB,IAAI,CAACb,IAAI,CAACC,KAAK,CAAC,GAAG,IAAI;UAC1C;QACF,CAAC,CAAC,OAAOa,GAAG,EAAE;UACZX,iBAAiB,GAAG,IAAI;UACxBC,cAAc,GAAGU,GAAG;QACtB,CAAC,SAAS;UACR,IAAI;YACF,IAAI,CAACZ,yBAAyB,IAAII,SAAS,CAACS,MAAM,IAAI,IAAI,EAAE;cAC1DT,SAAS,CAACS,MAAM,CAAC,CAAC;YACpB;UACF,CAAC,SAAS;YACR,IAAIZ,iBAAiB,EAAE;cACrB,MAAMC,cAAc;YACtB;UACF;QACF;QAEA,KAAK,IAAIY,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG1B,YAAY,CAAC2B,MAAM,EAAED,EAAE,EAAE,EAAE;UAC/C,IAAIE,WAAW,GAAG5B,YAAY,CAAC0B,EAAE,CAAC;UAClC,IAAIG,YAAY,GAAGD,WAAW,CAACE,QAAQ,CAACpB,IAAI,CAACC,KAAK;UAElD,IAAIN,gBAAgB,CAACwB,YAAY,CAAC,KAAK,IAAI,EAAE;YAC3C9B,OAAO,CAACgC,WAAW,CAAC,IAAItC,YAAY,CAACC,qBAAqB,CAACmC,YAAY,EAAEjC,MAAM,CAAC,EAAE,CAACgC,WAAW,CAAC,CAAC,CAAC;UACnG;QACF;MACF;IACF,CAAC;IACDI,kBAAkB,EAAE,SAASA,kBAAkBA,CAACC,GAAG,EAAE;MACnDjC,YAAY,CAACkC,IAAI,CAACD,GAAG,CAAC;IACxB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}