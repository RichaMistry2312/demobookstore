{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { LexRuntimeServiceClient } from \"./LexRuntimeServiceClient\";\nimport { DeleteSessionCommand } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PostContentCommand } from \"./commands/PostContentCommand\";\nimport { PostTextCommand } from \"./commands/PostTextCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\nvar LexRuntimeService = /** @class */function (_super) {\n  __extends(LexRuntimeService, _super);\n  function LexRuntimeService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  LexRuntimeService.prototype.deleteSession = function (args, optionsOrCb, cb) {\n    var command = new DeleteSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  LexRuntimeService.prototype.getSession = function (args, optionsOrCb, cb) {\n    var command = new GetSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  LexRuntimeService.prototype.postContent = function (args, optionsOrCb, cb) {\n    var command = new PostContentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  LexRuntimeService.prototype.postText = function (args, optionsOrCb, cb) {\n    var command = new PostTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  LexRuntimeService.prototype.putSession = function (args, optionsOrCb, cb) {\n    var command = new PutSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return LexRuntimeService;\n}(LexRuntimeServiceClient);\nexport { LexRuntimeService };","map":{"version":3,"names":["LexRuntimeServiceClient","DeleteSessionCommand","GetSessionCommand","PostContentCommand","PostTextCommand","PutSessionCommand","LexRuntimeService","_super","__extends","prototype","deleteSession","args","optionsOrCb","cb","command","send","Error","getSession","postContent","postText","putSession"],"sources":["../../LexRuntimeService.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}