{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport invariant from '../jsutils/invariant';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n  if (error) {\n    throw error;\n  }\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name, node) {\n  !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by \") + 'GraphQL introspection.', node);\n  }\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\n  }\n}","map":{"version":3,"names":["GraphQLError","invariant","NAME_RX","assertValidName","name","error","isValidNameError","node","length","concat","test"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/utilities/assertValidName.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport invariant from '../jsutils/invariant';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name, node) {\n  !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by \") + 'GraphQL introspection.', node);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,IAAIC,OAAO,GAAG,0BAA0B;AACxC;AACA;AACA;;AAEA,OAAO,SAASC,eAAeA,CAACC,IAAI,EAAE;EACpC,IAAIC,KAAK,GAAGC,gBAAgB,CAACF,IAAI,CAAC;EAElC,IAAIC,KAAK,EAAE;IACT,MAAMA,KAAK;EACb;EAEA,OAAOD,IAAI;AACb;AACA;AACA;AACA;;AAEA,OAAO,SAASE,gBAAgBA,CAACF,IAAI,EAAEG,IAAI,EAAE;EAC3C,EAAE,OAAOH,IAAI,KAAK,QAAQ,CAAC,GAAGH,SAAS,CAAC,CAAC,EAAE,iBAAiB,CAAC,GAAG,KAAK,CAAC;EAEtE,IAAIG,IAAI,CAACI,MAAM,GAAG,CAAC,IAAIJ,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACzD,OAAO,IAAIJ,YAAY,CAAC,SAAS,CAACS,MAAM,CAACL,IAAI,EAAE,sDAAsD,CAAC,GAAG,wBAAwB,EAAEG,IAAI,CAAC;EAC1I;EAEA,IAAI,CAACL,OAAO,CAACQ,IAAI,CAACN,IAAI,CAAC,EAAE;IACvB,OAAO,IAAIJ,YAAY,CAAC,oDAAoD,CAACS,MAAM,CAACL,IAAI,EAAE,cAAc,CAAC,EAAEG,IAAI,CAAC;EAClH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}