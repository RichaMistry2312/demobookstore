{"ast":null,"code":"var ModelSortPredicateCreator = /** @class */function () {\n  function ModelSortPredicateCreator() {}\n  ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function (sortDirection) {\n          ModelSortPredicateCreator.sortPredicateGroupsMap.get(receiver).push({\n            field: field,\n            sortDirection: sortDirection\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n    return predicate;\n  };\n  ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n  };\n  ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n  };\n  // transforms cb-style predicate into Proxy\n  ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n  return ModelSortPredicateCreator;\n}();\nexport { ModelSortPredicateCreator };","map":{"version":3,"names":["ModelSortPredicateCreator","createPredicateBuilder","modelDefinition","modelName","name","fieldNames","Set","Object","keys","fields","handler","predicate","Proxy","get","_target","propertyKey","receiver","field","has","Error","result","sortDirection","sortPredicateGroupsMap","push","set","isValidPredicate","getPredicates","throwOnInvalid","createFromExisting","existing","undefined","WeakMap"],"sources":["../../src/predicates/sort.ts"],"sourcesContent":[null],"mappings":"AASA,IAAAA,yBAAA;EAAA,SAAAA,0BAAA,GA2EA;EArEgBA,yBAAA,CAAAC,sBAAsB,GAArC,UACCC,eAA4B;IAEpB,IAAAC,SAAA,GAAAD,eAAA,CAAAE,IAAe;IACvB,IAAMC,UAAU,GAAG,IAAIC,GAAG,CAAUC,MAAM,CAACC,IAAI,CAACN,eAAe,CAACO,MAAM,CAAC,CAAC;IAExE,IAAIC,OAAuC;IAC3C,IAAMC,SAAS,GAAG,IAAIC,KAAK,CAC1B,EAAsB,EACrBF,OAAO,GAAG;MACVG,GAAG,EAAH,SAAAA,CAAIC,OAAO,EAAEC,WAAW,EAAEC,QAA0B;QACnD,IAAMC,KAAK,GAAGF,WAAsB;QAEpC,IAAI,CAACV,UAAU,CAACa,GAAG,CAACD,KAAK,CAAC,EAAE;UAC3B,MAAM,IAAIE,KAAK,CACd,qCAAmCF,KAAK,iBAAYd,SAAW,CAC/D;;QAGF,IAAMiB,MAAM,GAAG,SAAAA,CAACC,aAA4B;UAC3CrB,yBAAyB,CAACsB,sBAAsB,CAC9CT,GAAG,CAACG,QAAQ,CAAC,CACbO,IAAI,CAAC;YAAEN,KAAK,EAAAA,KAAA;YAAEI,aAAa,EAAAA;UAAA,CAAE,CAAC;UAEhC,OAAOL,QAAQ;QAChB,CAAC;QACD,OAAOI,MAAM;MACd;KACC,CACF;IAEDpB,yBAAyB,CAACsB,sBAAsB,CAACE,GAAG,CAACb,SAAS,EAAE,EAAE,CAAC;IAEnE,OAAOA,SAAS;EACjB,CAAC;EAEMX,yBAAA,CAAAyB,gBAAgB,GAAvB,UACCd,SAAc;IAEd,OAAOX,yBAAyB,CAACsB,sBAAsB,CAACJ,GAAG,CAACP,SAAS,CAAC;EACvE,CAAC;EAEMX,yBAAA,CAAA0B,aAAa,GAApB,UACCf,SAA2B,EAC3BgB,cAA8B;IAA9B,IAAAA,cAAA;MAAAA,cAAA,OAA8B;IAAA;IAE9B,IACCA,cAAc,IACd,CAAC3B,yBAAyB,CAACyB,gBAAgB,CAACd,SAAS,CAAC,EACrD;MACD,MAAM,IAAIQ,KAAK,CAAC,4BAA4B,CAAC;;IAG9C,OAAOnB,yBAAyB,CAACsB,sBAAsB,CAACT,GAAG,CAACF,SAAS,CAAC;EACvE,CAAC;EAED;EACOX,yBAAA,CAAA4B,kBAAkB,GAAzB,UACC1B,eAA4B,EAC5B2B,QAAkC;IAElC,IAAI,CAACA,QAAQ,IAAI,CAAC3B,eAAe,EAAE;MAClC,OAAO4B,SAAS;;IAGjB,OAAOD,QAAQ,CACd7B,yBAAyB,CAACC,sBAAsB,CAACC,eAAe,CAAC,CACjE;EACF,CAAC;EAzEcF,yBAAA,CAAAsB,sBAAsB,GAAG,IAAIS,OAAO,EAGhD;EAuEJ,OAAA/B,yBAAC;CAAA,CA3ED;SAAaA,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module"}