{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { TypeInfo } from './TypeInfo';\nimport { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { GraphQLSchema } from '../type/schema';\nimport { ValuesOfCorrectType } from '../validation/rules/ValuesOfCorrectType';\nimport { ValidationContext } from '../validation/ValidationContext';\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n *\n * This function will be removed in v15\n */\n\nexport function isValidLiteralValue(type, valueNode) {\n  var emptySchema = new GraphQLSchema({});\n  var emptyDoc = {\n    kind: Kind.DOCUMENT,\n    definitions: []\n  };\n  var typeInfo = new TypeInfo(emptySchema, undefined, type);\n  var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);\n  var visitor = ValuesOfCorrectType(context);\n  visit(valueNode, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n}","map":{"version":3,"names":["TypeInfo","Kind","visit","visitWithTypeInfo","GraphQLSchema","ValuesOfCorrectType","ValidationContext","isValidLiteralValue","type","valueNode","emptySchema","emptyDoc","kind","DOCUMENT","definitions","typeInfo","undefined","context","visitor","getErrors"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/utilities/isValidLiteralValue.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { TypeInfo } from './TypeInfo';\nimport { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { GraphQLSchema } from '../type/schema';\nimport { ValuesOfCorrectType } from '../validation/rules/ValuesOfCorrectType';\nimport { ValidationContext } from '../validation/ValidationContext';\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n *\n * This function will be removed in v15\n */\n\nexport function isValidLiteralValue(type, valueNode) {\n  var emptySchema = new GraphQLSchema({});\n  var emptyDoc = {\n    kind: Kind.DOCUMENT,\n    definitions: []\n  };\n  var typeInfo = new TypeInfo(emptySchema, undefined, type);\n  var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);\n  var visitor = ValuesOfCorrectType(context);\n  visit(valueNode, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,KAAK,EAAEC,iBAAiB,QAAQ,qBAAqB;AAC9D,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,mBAAmB,QAAQ,yCAAyC;AAC7E,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAmBA,CAACC,IAAI,EAAEC,SAAS,EAAE;EACnD,IAAIC,WAAW,GAAG,IAAIN,aAAa,CAAC,CAAC,CAAC,CAAC;EACvC,IAAIO,QAAQ,GAAG;IACbC,IAAI,EAAEX,IAAI,CAACY,QAAQ;IACnBC,WAAW,EAAE;EACf,CAAC;EACD,IAAIC,QAAQ,GAAG,IAAIf,QAAQ,CAACU,WAAW,EAAEM,SAAS,EAAER,IAAI,CAAC;EACzD,IAAIS,OAAO,GAAG,IAAIX,iBAAiB,CAACI,WAAW,EAAEC,QAAQ,EAAEI,QAAQ,CAAC;EACpE,IAAIG,OAAO,GAAGb,mBAAmB,CAACY,OAAO,CAAC;EAC1Cf,KAAK,CAACO,SAAS,EAAEN,iBAAiB,CAACY,QAAQ,EAAEG,OAAO,CAAC,CAAC;EACtD,OAAOD,OAAO,CAACE,SAAS,CAAC,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module"}