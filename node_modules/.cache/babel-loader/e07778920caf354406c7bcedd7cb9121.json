{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\n\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var definition = documentAST.definitions[i];\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      if (!operationName) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n        operation = definition;\n      } else if (definition.name && definition.name.value === operationName) {\n        return definition;\n      }\n    }\n  }\n  return operation;\n}","map":{"version":3,"names":["Kind","getOperationAST","documentAST","operationName","operation","i","definitions","length","definition","kind","OPERATION_DEFINITION","name","value"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/utilities/getOperationAST.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { Kind } from '../language/kinds';\n\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var definition = documentAST.definitions[i];\n\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      if (!operationName) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (definition.name && definition.name.value === operationName) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,mBAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,WAAW,EAAEC,aAAa,EAAE;EAC1D,IAAIC,SAAS,GAAG,IAAI;EAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,CAACI,WAAW,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IACvD,IAAIG,UAAU,GAAGN,WAAW,CAACI,WAAW,CAACD,CAAC,CAAC;IAE3C,IAAIG,UAAU,CAACC,IAAI,KAAKT,IAAI,CAACU,oBAAoB,EAAE;MACjD,IAAI,CAACP,aAAa,EAAE;QAClB;QACA;QACA;QACA,IAAIC,SAAS,EAAE;UACb,OAAO,IAAI;QACb;QAEAA,SAAS,GAAGI,UAAU;MACxB,CAAC,MAAM,IAAIA,UAAU,CAACG,IAAI,IAAIH,UAAU,CAACG,IAAI,CAACC,KAAK,KAAKT,aAAa,EAAE;QACrE,OAAOK,UAAU;MACnB;IACF;EACF;EAEA,OAAOJ,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module"}