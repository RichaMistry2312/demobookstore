{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n  var i;\n  var j;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n  return d[aLength][bLength];\n}","map":{"version":3,"names":["suggestionList","input","options","optionsByDistance","Object","create","oLength","length","inputThreshold","i","distance","lexicalDistance","threshold","Math","max","keys","sort","a","b","aStr","bStr","j","d","toLowerCase","aLength","bLength","cost","min"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/jsutils/suggestionList.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var i;\n  var j;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}