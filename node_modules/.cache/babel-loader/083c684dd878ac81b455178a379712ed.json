{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || _typeof(rawVariableValues) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n        break;\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\")));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n  var variableValues;\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n  if (errors.length !== 0) {\n    return errors;\n  }\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n  for (var i = 0, keys = Object.keys(fields); i < keys.length; ++i) {\n    var responseName = keys[i];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result !== undefined) {\n      results[responseName] = result;\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        var name = getFieldEntryKey(selection);\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n        fields[name].push(selection);\n        break;\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n  if (skip && skip.if === true) {\n    return false;\n  }\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n  if (include && include.if === false) {\n    return false;\n  }\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, responsePathAsArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n  throw new Error(\"Cannot complete value of unexpected type \\\"\".concat(inspect(returnType), \"\\\".\"));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, \"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\")) : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at \") + \"runtime for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" \") + 'function or each possible type should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type \") + \"for \\\"\".concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nvar collectSubfields = memoize3(_collectSubfields);\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nfunction defaultResolveTypeFn(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && _typeof(value) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (_typeof(source) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","forEach","isCollection","GraphQLError","locatedError","inspect","invariant","isInvalid","isNullish","isPromise","memoize3","promiseForObject","promiseReduce","getOperationRootType","typeFromAST","Kind","getVariableValues","getArgumentValues","getDirectiveValues","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","assertValidSchema","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","arguments","length","executeImpl","schema","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","responsePathAsArray","path","flattened","curr","push","key","prev","reverse","addPath","rawVariableValues","hasMultipleAssumedOperations","fragments","Object","create","i","definitions","definition","kind","OPERATION_DEFINITION","name","value","FRAGMENT_DEFINITION","concat","coercedVariableValues","variableDefinitions","apply","coerced","defaultFieldResolver","type","fields","collectFields","selectionSet","undefined","result","executeFieldsSerially","executeFields","error","Promise","resolve","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","runtimeType","visitedFragmentNames","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isPossibleType","alias","source","fieldNode","fieldName","fieldDef","getFieldDef","resolveFn","info","buildResolveInfo","resolveFieldValueOrError","completeValueCatchingError","returnType","args","_contextValue","asErrorInstance","Error","completed","completeValue","handleFieldError","rawError","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","item","index","completedItem","all","serialize","serializedResult","resolveType","defaultResolveTypeFn","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","isTypeOfResult","isTypeOfResults","_i","property","getQueryType","getFields"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/execution/execute.mjs"],"sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || _typeof(rawVariableValues) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\")));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues;\n\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var i = 0, keys = Object.keys(fields); i < keys.length; ++i) {\n    var responseName = keys[i];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        var name = getFieldEntryKey(selection);\n\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n\n        fields[name].push(selection);\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, responsePathAsArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Cannot complete value of unexpected type \\\"\".concat(inspect(returnType), \"\\\".\"));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, \"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\")) : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at \") + \"runtime for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" \") + 'function or each possible type should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type \") + \"for \\\"\".concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nfunction defaultResolveTypeFn(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && _typeof(value) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (_typeof(source) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}