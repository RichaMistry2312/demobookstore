{"ast":null,"code":"import { __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, S3_HOSTNAME_PATTERN, validateAccountId, validateArnEndpointOptions, validateDNSHostLabel, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateS3Service, validateService } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function (options) {\n  var baseHostname = options.baseHostname;\n  if (!S3_HOSTNAME_PATTERN.test(baseHostname)) {\n    return {\n      bucketEndpoint: false,\n      hostname: baseHostname\n    };\n  }\n  return isBucketNameOptions(options) ?\n  // Construct endpoint when bucketName is a string referring to a bucket name\n  getEndpointFromBucketName(options) :\n  // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n  getEndpointFromArn(options);\n};\nvar getEndpointFromArn = function (options) {\n  // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n  var _a = __read(getSuffixForArnEndpoint(options.baseHostname), 2),\n    clientRegion = _a[0],\n    hostnameSuffix = _a[1];\n  var pathStyleEndpoint = options.pathStyleEndpoint,\n    _b = options.dualstackEndpoint,\n    dualstackEndpoint = _b === void 0 ? false : _b,\n    _c = options.accelerateEndpoint,\n    accelerateEndpoint = _c === void 0 ? false : _c,\n    _d = options.tlsCompatible,\n    tlsCompatible = _d === void 0 ? true : _d,\n    useArnRegion = options.useArnRegion,\n    bucketName = options.bucketName,\n    _e = options.clientPartition,\n    clientPartition = _e === void 0 ? \"aws\" : _e,\n    _f = options.clientSigningRegion,\n    clientSigningRegion = _f === void 0 ? clientRegion : _f;\n  validateArnEndpointOptions({\n    pathStyleEndpoint: pathStyleEndpoint,\n    accelerateEndpoint: accelerateEndpoint,\n    tlsCompatible: tlsCompatible\n  });\n  // Validate and parse the ARN supplied as a bucket name\n  var service = bucketName.service,\n    partition = bucketName.partition,\n    accountId = bucketName.accountId,\n    region = bucketName.region,\n    resource = bucketName.resource;\n  validateService(service);\n  validatePartition(partition, {\n    clientPartition: clientPartition\n  });\n  validateAccountId(accountId);\n  validateRegion(region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion\n  });\n  var _g = getArnResources(resource),\n    accesspointName = _g.accesspointName,\n    outpostId = _g.outpostId;\n  validateDNSHostLabel(accesspointName + \"-\" + accountId, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? region : clientRegion;\n  var signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, {\n      tlsCompatible: tlsCompatible\n    });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    return {\n      bucketEndpoint: true,\n      hostname: accesspointName + \"-\" + accountId + \".\" + outpostId + \".s3-outposts.\" + endpointRegion + \".\" + hostnameSuffix,\n      signingRegion: signingRegion,\n      signingService: \"s3-outposts\"\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  return {\n    bucketEndpoint: true,\n    hostname: accesspointName + \"-\" + accountId + \".s3-accesspoint\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + endpointRegion + \".\" + hostnameSuffix,\n    signingRegion: signingRegion\n  };\n};\nvar getEndpointFromBucketName = function (_a) {\n  var _b = _a.accelerateEndpoint,\n    accelerateEndpoint = _b === void 0 ? false : _b,\n    baseHostname = _a.baseHostname,\n    bucketName = _a.bucketName,\n    _c = _a.dualstackEndpoint,\n    dualstackEndpoint = _c === void 0 ? false : _c,\n    _d = _a.pathStyleEndpoint,\n    pathStyleEndpoint = _d === void 0 ? false : _d,\n    _e = _a.tlsCompatible,\n    tlsCompatible = _e === void 0 ? true : _e;\n  var _f = __read(getSuffix(baseHostname), 2),\n    clientRegion = _f[0],\n    hostnameSuffix = _f[1];\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix : baseHostname\n    };\n  }\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix;\n  }\n  return {\n    bucketEndpoint: true,\n    hostname: bucketName + \".\" + baseHostname\n  };\n};","map":{"version":3,"names":["DOT_PATTERN","getArnResources","getSuffix","getSuffixForArnEndpoint","isBucketNameOptions","isDnsCompatibleBucketName","S3_HOSTNAME_PATTERN","validateAccountId","validateArnEndpointOptions","validateDNSHostLabel","validateNoDualstack","validateNoFIPS","validateOutpostService","validatePartition","validateRegion","validateS3Service","validateService","bucketHostname","options","baseHostname","test","bucketEndpoint","hostname","getEndpointFromBucketName","getEndpointFromArn","_a","__read","clientRegion","hostnameSuffix","pathStyleEndpoint","_b","dualstackEndpoint","_c","accelerateEndpoint","_d","tlsCompatible","useArnRegion","bucketName","_e","clientPartition","_f","clientSigningRegion","service","partition","accountId","region","resource","_g","accesspointName","outpostId","endpointRegion","signingRegion","signingService"],"sources":["../../src/bucketHostname.ts"],"sourcesContent":["import {\n  ArnHostnameParams,\n  BucketHostnameParams,\n  DOT_PATTERN,\n  getArnResources,\n  getSuffix,\n  getSuffixForArnEndpoint,\n  isBucketNameOptions,\n  isDnsCompatibleBucketName,\n  S3_HOSTNAME_PATTERN,\n  validateAccountId,\n  validateArnEndpointOptions,\n  validateDNSHostLabel,\n  validateNoDualstack,\n  validateNoFIPS,\n  validateOutpostService,\n  validatePartition,\n  validateRegion,\n  validateS3Service,\n  validateService,\n} from \"./bucketHostnameUtils\";\n\nexport interface BucketHostname {\n  hostname: string;\n  bucketEndpoint: boolean;\n  signingRegion?: string;\n  signingService?: string;\n}\n\nexport const bucketHostname = (options: BucketHostnameParams | ArnHostnameParams): BucketHostname => {\n  const { baseHostname } = options;\n  if (!S3_HOSTNAME_PATTERN.test(baseHostname)) {\n    return {\n      bucketEndpoint: false,\n      hostname: baseHostname,\n    };\n  }\n  return isBucketNameOptions(options)\n    ? // Construct endpoint when bucketName is a string referring to a bucket name\n      getEndpointFromBucketName(options)\n    : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n      getEndpointFromArn(options);\n};\n\nconst getEndpointFromArn = (options: ArnHostnameParams): BucketHostname => {\n  // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n  const [clientRegion, hostnameSuffix] = getSuffixForArnEndpoint(options.baseHostname);\n  const {\n    pathStyleEndpoint,\n    dualstackEndpoint = false,\n    accelerateEndpoint = false,\n    tlsCompatible = true,\n    useArnRegion,\n    bucketName,\n    clientPartition = \"aws\",\n    clientSigningRegion = clientRegion,\n  } = options;\n\n  validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n\n  // Validate and parse the ARN supplied as a bucket name\n  const { service, partition, accountId, region, resource } = bucketName;\n  validateService(service);\n  validatePartition(partition, { clientPartition });\n  validateAccountId(accountId);\n  validateRegion(region, { useArnRegion, clientRegion, clientSigningRegion });\n  const { accesspointName, outpostId } = getArnResources(resource);\n  validateDNSHostLabel(`${accesspointName}-${accountId}`, { tlsCompatible });\n\n  const endpointRegion = useArnRegion ? region : clientRegion;\n  const signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, { tlsCompatible });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    return {\n      bucketEndpoint: true,\n      hostname: `${accesspointName}-${accountId}.${outpostId}.s3-outposts.${endpointRegion}.${hostnameSuffix}`,\n      signingRegion,\n      signingService: \"s3-outposts\",\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  return {\n    bucketEndpoint: true,\n    hostname: `${accesspointName}-${accountId}.s3-accesspoint${\n      dualstackEndpoint ? \".dualstack\" : \"\"\n    }.${endpointRegion}.${hostnameSuffix}`,\n    signingRegion,\n  };\n};\n\nconst getEndpointFromBucketName = ({\n  accelerateEndpoint = false,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true,\n}: BucketHostnameParams): BucketHostname => {\n  const [clientRegion, hostnameSuffix] = getSuffix(baseHostname);\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}