{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (value === null || _typeof(value) !== 'object') {\n      return null;\n    }\n    var fields = objectValues(type.getFields());\n    var fieldNodes = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n      for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var field = _step.value;\n        var fieldValue = astFromValue(value[field.name], field.type);\n        if (fieldValue) {\n          fieldNodes.push({\n            kind: Kind.OBJECT_FIELD,\n            name: {\n              kind: Kind.NAME,\n              value: field.name\n            },\n            value: fieldValue\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n  if (isScalarType(type) || isEnumType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\n  }\n  /* istanbul ignore next */\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","forEach","isCollection","inspect","isNullish","isInvalid","objectValues","Kind","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","GraphQLID","astFromValue","value","type","astValue","ofType","kind","NULL","itemType","valuesNodes","item","itemNode","push","LIST","values","fields","getFields","fieldNodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","_step","next","done","field","fieldValue","name","OBJECT_FIELD","NAME","err","return","OBJECT","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","STRING","TypeError","concat","Error"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/utilities/astFromValue.mjs"],"sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { forEach, isCollection } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (value === null || _typeof(value) !== 'object') {\n      return null;\n    }\n\n    var fields = objectValues(type.getFields());\n    var fieldNodes = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var field = _step.value;\n        var fieldValue = astFromValue(value[field.name], field.type);\n\n        if (fieldValue) {\n          fieldNodes.push({\n            kind: Kind.OBJECT_FIELD,\n            name: {\n              kind: Kind.NAME,\n              value: field.name\n            },\n            value: fieldValue\n          });\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  if (isScalarType(type) || isEnumType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unknown type: \".concat(type, \".\"));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}