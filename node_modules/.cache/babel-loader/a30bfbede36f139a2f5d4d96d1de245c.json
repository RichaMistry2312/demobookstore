{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport invariant from '../jsutils/invariant';\nimport { getIntrospectionQuery } from './introspectionQuery';\nimport { execute } from '../execution/execute';\nimport { parse } from '../language/parser';\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  !(!result.then && !result.errors && result.data) ? invariant(0) : void 0;\n  return result.data;\n}","map":{"version":3,"names":["invariant","getIntrospectionQuery","execute","parse","introspectionFromSchema","schema","options","queryAST","result","then","errors","data"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/utilities/introspectionFromSchema.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport invariant from '../jsutils/invariant';\nimport { getIntrospectionQuery } from './introspectionQuery';\nimport { execute } from '../execution/execute';\nimport { parse } from '../language/parser';\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  !(!result.then && !result.errors && result.data) ? invariant(0) : void 0;\n  return result.data;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,sBAAsB;AAC5C,SAASC,qBAAqB,QAAQ,sBAAsB;AAC5D,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,KAAK,QAAQ,oBAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACvD,IAAIC,QAAQ,GAAGJ,KAAK,CAACF,qBAAqB,CAACK,OAAO,CAAC,CAAC;EACpD,IAAIE,MAAM,GAAGN,OAAO,CAACG,MAAM,EAAEE,QAAQ,CAAC;EACtC,EAAE,CAACC,MAAM,CAACC,IAAI,IAAI,CAACD,MAAM,CAACE,MAAM,IAAIF,MAAM,CAACG,IAAI,CAAC,GAAGX,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EACxE,OAAOQ,MAAM,CAACG,IAAI;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module"}