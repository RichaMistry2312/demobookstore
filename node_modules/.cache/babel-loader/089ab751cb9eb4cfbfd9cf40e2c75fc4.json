{"ast":null,"code":"/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isAsyncIterable } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport { addPath, assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef, resolveFieldValueOrError, responsePathAsArray } from '../execution/execute';\nimport mapAsyncIterator from './mapAsyncIterator';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (client error). The promise will be rejected if a\n * server error occurs.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n  throw error;\n}\nfunction subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (\n      // Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  }, reportGraphQLError);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise<AsyncIterable>.\n *\n * If the client-provided invalid arguments, the source stream could not be\n * created, or the resolver did not return an AsyncIterable, this function will\n * will throw an error, which should be caught and handled by the caller.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n  try {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({\n        errors: exeContext\n      });\n    }\n    var type = getOperationRootType(schema, exeContext.operation);\n    var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = getFieldDef(schema, type, fieldName);\n    if (!fieldDef) {\n      throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n    } // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;\n    var path = addPath(undefined, responseName);\n    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n\n    var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info); // Coerce to Promise for easier error handling and consistent return type.\n\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        throw locatedError(eventStream, fieldNodes, responsePathAsArray(path));\n      } // Assert field returned an event stream, otherwise yield an error.\n\n      if (isAsyncIterable(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n      throw new Error('Subscription field must return Async Iterable. Received: ' + inspect(eventStream));\n    });\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}","map":{"version":3,"names":["isAsyncIterable","inspect","GraphQLError","locatedError","addPath","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","collectFields","execute","getFieldDef","resolveFieldValueOrError","responsePathAsArray","mapAsyncIterator","getOperationRootType","subscribe","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","arguments","length","subscribeImpl","schema","reportGraphQLError","error","errors","sourcePromise","createSourceEventStream","mapSourceToResponse","payload","then","resultOrStream","exeContext","Array","isArray","Promise","resolve","type","operation","fields","selectionSet","Object","create","responseNames","keys","responseName","fieldNodes","fieldNode","fieldName","name","value","fieldDef","concat","resolveFn","path","undefined","info","result","eventStream","Error","reject"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/subscription/subscribe.mjs"],"sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isAsyncIterable } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport { addPath, assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef, resolveFieldValueOrError, responsePathAsArray } from '../execution/execute';\nimport mapAsyncIterator from './mapAsyncIterator';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (client error). The promise will be rejected if a\n * server error occurs.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  }, reportGraphQLError);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise<AsyncIterable>.\n *\n * If the client-provided invalid arguments, the source stream could not be\n * created, or the resolver did not return an AsyncIterable, this function will\n * will throw an error, which should be caught and handled by the caller.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  try {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({\n        errors: exeContext\n      });\n    }\n\n    var type = getOperationRootType(schema, exeContext.operation);\n    var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = getFieldDef(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n    } // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n\n    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;\n    var path = addPath(undefined, responseName);\n    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n\n    var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info); // Coerce to Promise for easier error handling and consistent return type.\n\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        throw locatedError(eventStream, fieldNodes, responsePathAsArray(path));\n      } // Assert field returned an event stream, otherwise yield an error.\n\n\n      if (isAsyncIterable(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n\n      throw new Error('Subscription field must return Async Iterable. Received: ' + inspect(eventStream));\n    });\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}