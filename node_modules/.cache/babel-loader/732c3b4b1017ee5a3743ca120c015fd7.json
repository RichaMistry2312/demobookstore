{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  var message = \"Unknown type \\\"\".concat(typeName, \"\\\".\");\n  if (suggestedTypes.length) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedTypes), \"?\");\n  }\n  return message;\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n      if (!type) {\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","suggestionList","quotedOrList","unknownTypeMessage","typeName","suggestedTypes","message","concat","length","KnownTypeNames","context","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","InputObjectTypeDefinition","NamedType","node","schema","getSchema","name","value","type","getType","reportError","Object","keys","getTypeMap"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/validation/rules/KnownTypeNames.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  var message = \"Unknown type \\\"\".concat(typeName, \"\\\".\");\n\n  if (suggestedTypes.length) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedTypes), \"?\");\n  }\n\n  return message;\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n\n      if (!type) {\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,cAAc,EAAE;EAC3D,IAAIC,OAAO,GAAG,iBAAiB,CAACC,MAAM,CAACH,QAAQ,EAAE,KAAK,CAAC;EAEvD,IAAIC,cAAc,CAACG,MAAM,EAAE;IACzBF,OAAO,IAAI,gBAAgB,CAACC,MAAM,CAACL,YAAY,CAACG,cAAc,CAAC,EAAE,GAAG,CAAC;EACvE;EAEA,OAAOC,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,cAAcA,CAACC,OAAO,EAAE;EACtC,OAAO;IACL;IACA;IACA;IACAC,oBAAoB,EAAE,SAASA,oBAAoBA,CAAA,EAAG;MACpD,OAAO,KAAK;IACd,CAAC;IACDC,uBAAuB,EAAE,SAASA,uBAAuBA,CAAA,EAAG;MAC1D,OAAO,KAAK;IACd,CAAC;IACDC,mBAAmB,EAAE,SAASA,mBAAmBA,CAAA,EAAG;MAClD,OAAO,KAAK;IACd,CAAC;IACDC,yBAAyB,EAAE,SAASA,yBAAyBA,CAAA,EAAG;MAC9D,OAAO,KAAK;IACd,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACC,IAAI,EAAE;MAClC,IAAIC,MAAM,GAAGP,OAAO,CAACQ,SAAS,CAAC,CAAC;MAChC,IAAId,QAAQ,GAAGY,IAAI,CAACG,IAAI,CAACC,KAAK;MAC9B,IAAIC,IAAI,GAAGJ,MAAM,CAACK,OAAO,CAAClB,QAAQ,CAAC;MAEnC,IAAI,CAACiB,IAAI,EAAE;QACTX,OAAO,CAACa,WAAW,CAAC,IAAIvB,YAAY,CAACG,kBAAkB,CAACC,QAAQ,EAAEH,cAAc,CAACG,QAAQ,EAAEoB,MAAM,CAACC,IAAI,CAACR,MAAM,CAACS,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAACV,IAAI,CAAC,CAAC,CAAC;MACzI;IACF;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}