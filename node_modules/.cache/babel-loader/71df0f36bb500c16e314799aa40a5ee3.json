{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nexport var bucketEndpointMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, _e, hostname, bucketEndpoint;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              bucketName = args.input.Bucket;\n              replaceBucketInPath = options.bucketEndpoint;\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3 /*break*/, 7];\n              if (!options.bucketEndpoint) return [3 /*break*/, 1];\n              request.hostname = bucketName;\n              return [3 /*break*/, 6];\n            case 1:\n              if (!validateArn(bucketName)) return [3 /*break*/, 5];\n              bucketArn = parseArn(bucketName);\n              _a = getPseudoRegion;\n              return [4 /*yield*/, options.region()];\n            case 2:\n              clientRegion = _a.apply(void 0, [_f.sent()]);\n              return [4 /*yield*/, options.regionInfoProvider(clientRegion)];\n            case 3:\n              _b = _f.sent() || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;\n              return [4 /*yield*/, options.useArnRegion()];\n            case 4:\n              useArnRegion = _f.sent();\n              _d = bucketHostname({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion: useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion\n              }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService;\n              // If the request needs to use a region or service name inferred from ARN that different from client region, we\n              // need to set them in the handler context so the signer will use them\n              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n              }\n              if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n              }\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              return [3 /*break*/, 6];\n            case 5:\n              _e = bucketHostname({\n                bucketName: bucketName,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\"\n              }), hostname = _e.hostname, bucketEndpoint = _e.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              _f.label = 6;\n            case 6:\n              if (replaceBucketInPath) {\n                request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n                if (request.path === \"\") {\n                  request.path = \"/\";\n                }\n              }\n              _f.label = 7;\n            case 7:\n              return [2 /*return*/, next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\"\n};\nexport var getBucketEndpointPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["HttpRequest","parse","parseArn","validate","validateArn","bucketHostname","getPseudoRegion","bucketEndpointMiddleware","options","next","context","args","__awaiter","bucketName","input","Bucket","replaceBucketInPath","bucketEndpoint","request","isInstance","hostname","bucketArn","_a","region","clientRegion","apply","_f","sent","regionInfoProvider","_b","partition","_c","signingRegion","useArnRegion","_d","baseHostname","accelerateEndpoint","useAccelerateEndpoint","dualstackEndpoint","useDualstackEndpoint","pathStyleEndpoint","forcePathStyle","tlsCompatible","protocol","clientPartition","clientSigningRegion","modifiedSigningRegion","signingService","_e","path","replace","__assign","bucketEndpointMiddlewareOptions","tags","name","relation","toMiddleware","getBucketEndpointPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["../../src/bucketEndpointMiddleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\n\nexport const bucketEndpointMiddleware = (options: BucketEndpointResolvedConfig): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>,\n  context: HandlerExecutionContext\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { Bucket: bucketName } = args.input as { Bucket: string };\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if (validateArn(bucketName)) {\n      const bucketArn = parseArn(bucketName);\n      const clientRegion = getPseudoRegion(await options.region());\n      const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion)) || {};\n      const useArnRegion = await options.useArnRegion();\n      const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n      });\n\n      // If the request needs to use a region or service name inferred from ARN that different from client region, we\n      // need to set them in the handler context so the signer will use them\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n      });\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n\n  return next({ ...args, request });\n};\n\nexport const bucketEndpointMiddlewareOptions: RelativeMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n};\n\nexport const getBucketEndpointPlugin = (options: BucketEndpointResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}