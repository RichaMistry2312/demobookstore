{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { validateSchema } from './type/validate';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve(\n    // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver); // Assert that the execution was synchronous.\n\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n  return result;\n}\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = validateSchema(schema);\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n  var document;\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n  var validationErrors = validate(schema, document);\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n  return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}","map":{"version":3,"names":["validateSchema","parse","validate","execute","graphql","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","_arguments","arguments","Promise","resolve","length","graphqlImpl","schema","graphqlSync","result","then","Error","schemaValidationErrors","errors","document","syntaxError","validationErrors"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/graphql.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { validateSchema } from './type/validate';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve( // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver); // Assert that the execution was synchronous.\n\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  var document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  var validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,iBAAiB;AAChD,SAASC,KAAK,QAAQ,mBAAmB;AACzC,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,OAAO,SAASC,OAAOA,CAACC,YAAY,EAAEC,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,EAAE;EACnH,IAAIC,UAAU,GAAGC,SAAS;;EAE1B;EACA;EACA,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAE;IACpC,OAAOA,OAAO;IAAE;IAChBH,UAAU,CAACI,MAAM,KAAK,CAAC,GAAGC,WAAW,CAACZ,YAAY,CAACa,MAAM,EAAEb,YAAY,CAACC,MAAM,EAAED,YAAY,CAACE,SAAS,EAAEF,YAAY,CAACG,YAAY,EAAEH,YAAY,CAACI,cAAc,EAAEJ,YAAY,CAACK,aAAa,EAAEL,YAAY,CAACM,aAAa,CAAC,GAAGM,WAAW,CAACZ,YAAY,EAAEC,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,CAAC,CAAC;EACrU,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,WAAWA,CAACd,YAAY,EAAEC,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,EAAE;EACvH;EACA;EACA,IAAIS,MAAM,GAAGP,SAAS,CAACG,MAAM,KAAK,CAAC,GAAGC,WAAW,CAACZ,YAAY,CAACa,MAAM,EAAEb,YAAY,CAACC,MAAM,EAAED,YAAY,CAACE,SAAS,EAAEF,YAAY,CAACG,YAAY,EAAEH,YAAY,CAACI,cAAc,EAAEJ,YAAY,CAACK,aAAa,EAAEL,YAAY,CAACM,aAAa,CAAC,GAAGM,WAAW,CAACZ,YAAY,EAAEC,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,CAAC,CAAC,CAAC;;EAEhV,IAAIS,MAAM,CAACC,IAAI,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;EACxE;EAEA,OAAOF,MAAM;AACf;AAEA,SAASH,WAAWA,CAACC,MAAM,EAAEZ,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,EAAE;EAC1G;EACA,IAAIY,sBAAsB,GAAGvB,cAAc,CAACkB,MAAM,CAAC;EAEnD,IAAIK,sBAAsB,CAACP,MAAM,GAAG,CAAC,EAAE;IACrC,OAAO;MACLQ,MAAM,EAAED;IACV,CAAC;EACH,CAAC,CAAC;;EAGF,IAAIE,QAAQ;EAEZ,IAAI;IACFA,QAAQ,GAAGxB,KAAK,CAACK,MAAM,CAAC;EAC1B,CAAC,CAAC,OAAOoB,WAAW,EAAE;IACpB,OAAO;MACLF,MAAM,EAAE,CAACE,WAAW;IACtB,CAAC;EACH,CAAC,CAAC;;EAGF,IAAIC,gBAAgB,GAAGzB,QAAQ,CAACgB,MAAM,EAAEO,QAAQ,CAAC;EAEjD,IAAIE,gBAAgB,CAACX,MAAM,GAAG,CAAC,EAAE;IAC/B,OAAO;MACLQ,MAAM,EAAEG;IACV,CAAC;EACH,CAAC,CAAC;;EAGF,OAAOxB,OAAO,CAACe,MAAM,EAAEO,QAAQ,EAAElB,SAAS,EAAEC,YAAY,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,CAAC;AACzG","ignoreList":[]},"metadata":{},"sourceType":"module"}