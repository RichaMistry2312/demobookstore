{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n      if (!queryType) {\n        throw new GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n      return queryType;\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n      return mutationType;\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n      return subscriptionType;\n    default:\n      throw new GraphQLError('Can only have query, mutation and subscription operations.', [operation]);\n  }\n}","map":{"version":3,"names":["GraphQLError","getOperationRootType","schema","operation","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/utilities/getOperationRootType.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../error/GraphQLError';\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n\n      if (!queryType) {\n        throw new GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n\n      return queryType;\n\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n\n      if (!mutationType) {\n        throw new GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n\n      return mutationType;\n\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n\n      if (!subscriptionType) {\n        throw new GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n\n      return subscriptionType;\n\n    default:\n      throw new GraphQLError('Can only have query, mutation and subscription operations.', [operation]);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,uBAAuB;;AAEpD;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,MAAM,EAAEC,SAAS,EAAE;EACtD,QAAQA,SAAS,CAACA,SAAS;IACzB,KAAK,OAAO;MACV,IAAIC,SAAS,GAAGF,MAAM,CAACG,YAAY,CAAC,CAAC;MAErC,IAAI,CAACD,SAAS,EAAE;QACd,MAAM,IAAIJ,YAAY,CAAC,sDAAsD,EAAE,CAACG,SAAS,CAAC,CAAC;MAC7F;MAEA,OAAOC,SAAS;IAElB,KAAK,UAAU;MACb,IAAIE,YAAY,GAAGJ,MAAM,CAACK,eAAe,CAAC,CAAC;MAE3C,IAAI,CAACD,YAAY,EAAE;QACjB,MAAM,IAAIN,YAAY,CAAC,yCAAyC,EAAE,CAACG,SAAS,CAAC,CAAC;MAChF;MAEA,OAAOG,YAAY;IAErB,KAAK,cAAc;MACjB,IAAIE,gBAAgB,GAAGN,MAAM,CAACO,mBAAmB,CAAC,CAAC;MAEnD,IAAI,CAACD,gBAAgB,EAAE;QACrB,MAAM,IAAIR,YAAY,CAAC,6CAA6C,EAAE,CAACG,SAAS,CAAC,CAAC;MACpF;MAEA,OAAOK,gBAAgB;IAEzB;MACE,MAAM,IAAIR,YAAY,CAAC,4DAA4D,EAAE,CAACG,SAAS,CAAC,CAAC;EACrG;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}