{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ConsoleLogger as Logger, getAmplifyUserAgent, Platform, Credentials } from '@aws-amplify/core';\nimport { S3Client, PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler, SEND_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { parseUrl } from '@aws-sdk/url-parser-node';\nimport { streamCollector } from '@aws-sdk/fetch-http-handler';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar localTestingStorageEndpoint = 'http://localhost:20005';\nvar SET_CONTENT_LENGTH_HEADER = 'contentLengthMiddleware';\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n    this.queueSize = 4;\n    // Data for current upload\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.multiPartMap = [];\n    this.cancel = false;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, s3, uploadId, numberOfPartsToUpload, start, parts;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n          case 1:\n            _a.body = _b.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 3];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [4 /*yield*/, this._createNewS3Client(this.opts, this.emitter)];\n          case 2:\n            s3 = _b.sent();\n            return [2 /*return*/, s3.send(putObjectCommand)];\n          case 3:\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 4:\n            uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            start = 0;\n            _b.label = 5;\n          case 5:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 10];\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n          case 6:\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            _b.sent();\n            parts = this.createParts(start);\n            return [4 /*yield*/, this.uploadParts(uploadId, parts)];\n          case 7:\n            _b.sent();\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n          case 8:\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            _b.sent();\n            _b.label = 9;\n          case 9:\n            start += this.queueSize;\n            return [3 /*break*/, 5];\n          case 10:\n            return [4 /*yield*/, this.finishMultiPartUpload(uploadId)];\n          case 11:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.createParts = function (startPartNumber) {\n    var parts = [];\n    var partNumber = startPartNumber;\n    for (var bodyStart = startPartNumber * this.minPartSize; bodyStart < this.totalBytesToUpload && parts.length < this.queueSize;) {\n      var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n      parts.push({\n        bodyPart: this.body.slice(bodyStart, bodyEnd),\n        partNumber: ++partNumber,\n        emitter: new events.EventEmitter(),\n        _lastUploadedBytes: 0\n      });\n      bodyStart += this.minPartSize;\n    }\n    return parts;\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, s3, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4 /*yield*/, this._createNewS3Client(this.opts)];\n          case 1:\n            s3 = _a.sent();\n            return [4 /*yield*/, s3.send(createMultiPartUploadCommand)];\n          case 2:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises, parts_1, parts_1_1, part, uploadPartCommandInput, uploadPartCommand, s3, e_1_1, allResults, i, error_1;\n      var e_1, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            promises = [];\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 6, 7, 8]);\n            parts_1 = __values(parts), parts_1_1 = parts_1.next();\n            _b.label = 2;\n          case 2:\n            if (!!parts_1_1.done) return [3 /*break*/, 5];\n            part = parts_1_1.value;\n            this.setupEventListener(part);\n            uploadPartCommandInput = {\n              PartNumber: part.partNumber,\n              Body: part.bodyPart,\n              UploadId: uploadId,\n              Key: this.params.Key,\n              Bucket: this.params.Bucket\n            };\n            uploadPartCommand = new UploadPartCommand(uploadPartCommandInput);\n            return [4 /*yield*/, this._createNewS3Client(this.opts, part.emitter)];\n          case 3:\n            s3 = _b.sent();\n            promises.push(s3.send(uploadPartCommand));\n            _b.label = 4;\n          case 4:\n            parts_1_1 = parts_1.next();\n            return [3 /*break*/, 2];\n          case 5:\n            return [3 /*break*/, 8];\n          case 6:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 8];\n          case 7:\n            try {\n              if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n            return [7 /*endfinally*/];\n          case 8:\n            _b.trys.push([8, 10,, 11]);\n            return [4 /*yield*/, Promise.all(promises)];\n          case 9:\n            allResults = _b.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.multiPartMap.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 11];\n          case 10:\n            error_1 = _b.sent();\n            logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n            this.cancelUpload();\n            return [2 /*return*/];\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, s3, data, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.multiPartMap\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            return [4 /*yield*/, this._createNewS3Client(this.opts)];\n          case 1:\n            s3 = _a.sent();\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(completeUploadCommand)];\n          case 3:\n            data = _a.sent();\n            return [2 /*return*/, data.Key];\n          case 4:\n            error_2 = _a.sent();\n            logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n            this.cancelUpload();\n            return [2 /*return*/];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMessage, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.cancel) return [3 /*break*/, 5];\n            errorMessage = 'Upload was cancelled.';\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cleanup(uploadId)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_3 = _a.sent();\n            errorMessage += error_3.errorMessage;\n            return [3 /*break*/, 4];\n          case 4:\n            throw new Error(errorMessage);\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n    this.cancel = true;\n  };\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, s3, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.multiPartMap = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4 /*yield*/, this._createNewS3Client(this.opts)];\n          case 1:\n            s3 = _a.sent();\n            return [4 /*yield*/, s3.send(new AbortMultipartUploadCommand(input))];\n          case 2:\n            _a.sent();\n            return [4 /*yield*/, s3.send(new ListPartsCommand(input))];\n          case 3:\n            data = _a.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multi Part upload clean up failed');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isGenericObject(body)) return [3 /*break*/, 1];\n            // Any javascript object\n            return [2 /*return*/, JSON.stringify(body)];\n          case 1:\n            if (!this.isBlob(body)) return [3 /*break*/, 4];\n            if (!Platform.isReactNative) return [3 /*break*/, 3];\n            return [4 /*yield*/, streamCollector(body)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            return [2 /*return*/, body];\n          case 4:\n            // Files, arrayBuffer etc\n            return [2 /*return*/, body];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.isBlob = function (body) {\n    return typeof Blob !== 'undefined' && body instanceof Blob;\n  };\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @private\n   * creates an S3 client with new V3 aws sdk\n   */\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, region, dangerouslyConnectToHttpEndpointForTesting, localTestingConfig, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _a.sent();\n            region = config.region, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;\n            localTestingConfig = {};\n            if (dangerouslyConnectToHttpEndpointForTesting) {\n              localTestingConfig = {\n                endpoint: localTestingStorageEndpoint,\n                tls: false,\n                bucketEndpoint: false,\n                forcePathStyle: true\n              };\n            }\n            client = new S3Client(__assign(__assign({\n              region: region,\n              credentials: credentials\n            }, localTestingConfig), {\n              requestHandler: new AxiosHttpHandler({}, emitter),\n              customUserAgent: getAmplifyUserAgent(),\n              urlParser: parseUrl\n            }));\n            client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n            return [2 /*return*/, client];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3ProviderManagedUpload.prototype._getCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for storage', cred);\n      return cred;\n    }).catch(function (error) {\n      logger.warn('ensure credentials error', error);\n      return false;\n    });\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"names":["ConsoleLogger","Logger","getAmplifyUserAgent","Platform","Credentials","S3Client","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","AxiosHttpHandler","SEND_PROGRESS_EVENT","events","parseUrl","streamCollector","logger","localTestingStorageEndpoint","SET_CONTENT_LENGTH_HEADER","AWSS3ProviderManagedUpload","params","opts","emitter","minPartSize","queueSize","body","multiPartMap","cancel","bytesUploaded","totalBytesToUpload","prototype","upload","_a","validateAndSanitizeBody","Body","_b","sent","byteLength","putObjectCommand","_createNewS3Client","s3","send","createMultiPartUpload","uploadId","numberOfPartsToUpload","Math","ceil","start","checkIfUploadCancelled","parts","createParts","uploadParts","finishMultiPartUpload","startPartNumber","partNumber","bodyStart","length","bodyEnd","min","push","bodyPart","slice","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","response","debug","UploadId","promises","parts_1","__values","parts_1_1","next","part","value","setupEventListener","uploadPartCommandInput","PartNumber","Key","Bucket","uploadPartCommand","Promise","all","allResults","i","ETag","error","error_1","cancelUpload","input","MultipartUpload","Parts","completeUploadCommand","data","error_2","errorMessage","cleanup","error_3","Error","_this","on","progress","progressChanged","loaded","incrementalUpdate","emit","total","key","undefined","size","path","isGenericObject","JSON","stringify","isBlob","isReactNative","Blob","config","_getCredentials","credentials","region","dangerouslyConnectToHttpEndpointForTesting","localTestingConfig","endpoint","tls","bucketEndpoint","forcePathStyle","client","__assign","requestHandler","customUserAgent","urlParser","middlewareStack","remove","get","then","cred","shear","catch","warn"],"sources":["../../src/providers/AWSS3ProviderManagedUpload.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}