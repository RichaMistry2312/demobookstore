{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in \") + \"position expecting type \\\"\".concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node,\n              type = _ref2.type,\n              defaultValue = _ref2.defaultValue;\n            var varName = node.name.value;\n            var varDef = varDefMap[varName];\n            if (varDef && type) {\n              // A var type is allowed if it is the same or more strict (e.g. is\n              // a subtype of) than the expected type. It can be more strict if\n              // the variable type is non-null when the expected type is nullable.\n              // If both are list types, the variable item type can be more strict\n              // than the expected item type (contravariant).\n              var schema = context.getSchema();\n              var varType = typeFromAST(schema, varDef.type);\n              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n                context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","map":{"version":3,"names":["inspect","GraphQLError","Kind","isNonNullType","isTypeSubTypeOf","typeFromAST","badVarPosMessage","varName","varType","expectedType","concat","VariablesInAllowedPosition","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_ref2","value","node","type","defaultValue","name","varDef","schema","getSchema","allowedVariableUsage","reportError","err","return","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","nullableLocationType","ofType"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/validation/rules/VariablesInAllowedPosition.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in \") + \"position expecting type \\\"\".concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = usages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref2 = _step.value;\n            var node = _ref2.node,\n                type = _ref2.type,\n                defaultValue = _ref2.defaultValue;\n            var varName = node.name.value;\n            var varDef = varDefMap[varName];\n\n            if (varDef && type) {\n              // A var type is allowed if it is the same or more strict (e.g. is\n              // a subtype of) than the expected type. It can be more strict if\n              // the variable type is non-null when the expected type is nullable.\n              // If both are list types, the variable item type can be more strict\n              // than the expected item type (contravariant).\n              var schema = context.getSchema();\n              var varType = typeFromAST(schema, varDef.type);\n\n              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n                context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,WAAW,QAAQ,6BAA6B;AACzD,OAAO,SAASC,gBAAgBA,CAACC,OAAO,EAAEC,OAAO,EAAEC,YAAY,EAAE;EAC/D,OAAO,cAAc,CAACC,MAAM,CAACH,OAAO,EAAE,eAAe,CAAC,CAACG,MAAM,CAACF,OAAO,EAAE,aAAa,CAAC,GAAG,4BAA4B,CAACE,MAAM,CAACD,YAAY,EAAE,KAAK,CAAC;AAClJ;AACA;AACA;AACA;;AAEA,OAAO,SAASE,0BAA0BA,CAACC,OAAO,EAAE;EAClD,IAAIC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACnC,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAK,EAAE,SAASA,KAAKA,CAAA,EAAG;QACtBJ,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MACjC,CAAC;MACDG,KAAK,EAAE,SAASA,KAAKA,CAACC,SAAS,EAAE;QAC/B,IAAIC,MAAM,GAAGR,OAAO,CAACS,0BAA0B,CAACF,SAAS,CAAC;QAC1D,IAAIG,yBAAyB,GAAG,IAAI;QACpC,IAAIC,iBAAiB,GAAG,KAAK;QAC7B,IAAIC,cAAc,GAAGC,SAAS;QAE9B,IAAI;UACF,KAAK,IAAIC,SAAS,GAAGN,MAAM,CAACO,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAEC,KAAK,EAAE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAI,CAAC,CAAC,EAAEC,IAAI,CAAC,EAAET,yBAAyB,GAAG,IAAI,EAAE;YACvJ,IAAIU,KAAK,GAAGH,KAAK,CAACI,KAAK;YACvB,IAAIC,IAAI,GAAGF,KAAK,CAACE,IAAI;cACjBC,IAAI,GAAGH,KAAK,CAACG,IAAI;cACjBC,YAAY,GAAGJ,KAAK,CAACI,YAAY;YACrC,IAAI7B,OAAO,GAAG2B,IAAI,CAACG,IAAI,CAACJ,KAAK;YAC7B,IAAIK,MAAM,GAAGzB,SAAS,CAACN,OAAO,CAAC;YAE/B,IAAI+B,MAAM,IAAIH,IAAI,EAAE;cAClB;cACA;cACA;cACA;cACA;cACA,IAAII,MAAM,GAAG3B,OAAO,CAAC4B,SAAS,CAAC,CAAC;cAChC,IAAIhC,OAAO,GAAGH,WAAW,CAACkC,MAAM,EAAED,MAAM,CAACH,IAAI,CAAC;cAE9C,IAAI3B,OAAO,IAAI,CAACiC,oBAAoB,CAACF,MAAM,EAAE/B,OAAO,EAAE8B,MAAM,CAACF,YAAY,EAAED,IAAI,EAAEC,YAAY,CAAC,EAAE;gBAC9FxB,OAAO,CAAC8B,WAAW,CAAC,IAAIzC,YAAY,CAACK,gBAAgB,CAACC,OAAO,EAAEP,OAAO,CAACQ,OAAO,CAAC,EAAER,OAAO,CAACmC,IAAI,CAAC,CAAC,EAAE,CAACG,MAAM,EAAEJ,IAAI,CAAC,CAAC,CAAC;cACnH;YACF;UACF;QACF,CAAC,CAAC,OAAOS,GAAG,EAAE;UACZpB,iBAAiB,GAAG,IAAI;UACxBC,cAAc,GAAGmB,GAAG;QACtB,CAAC,SAAS;UACR,IAAI;YACF,IAAI,CAACrB,yBAAyB,IAAII,SAAS,CAACkB,MAAM,IAAI,IAAI,EAAE;cAC1DlB,SAAS,CAACkB,MAAM,CAAC,CAAC;YACpB;UACF,CAAC,SAAS;YACR,IAAIrB,iBAAiB,EAAE;cACrB,MAAMC,cAAc;YACtB;UACF;QACF;MACF;IACF,CAAC;IACDqB,kBAAkB,EAAE,SAASA,kBAAkBA,CAACX,IAAI,EAAE;MACpDrB,SAAS,CAACqB,IAAI,CAACY,QAAQ,CAACT,IAAI,CAACJ,KAAK,CAAC,GAAGC,IAAI;IAC5C;EACF,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASO,oBAAoBA,CAACF,MAAM,EAAE/B,OAAO,EAAEuC,eAAe,EAAEC,YAAY,EAAEC,oBAAoB,EAAE;EAClG,IAAI9C,aAAa,CAAC6C,YAAY,CAAC,IAAI,CAAC7C,aAAa,CAACK,OAAO,CAAC,EAAE;IAC1D,IAAI0C,8BAA8B,GAAGH,eAAe,IAAIA,eAAe,CAACI,IAAI,KAAKjD,IAAI,CAACkD,IAAI;IAC1F,IAAIC,uBAAuB,GAAGJ,oBAAoB,KAAKxB,SAAS;IAEhE,IAAI,CAACyB,8BAA8B,IAAI,CAACG,uBAAuB,EAAE;MAC/D,OAAO,KAAK;IACd;IAEA,IAAIC,oBAAoB,GAAGN,YAAY,CAACO,MAAM;IAC9C,OAAOnD,eAAe,CAACmC,MAAM,EAAE/B,OAAO,EAAE8C,oBAAoB,CAAC;EAC/D;EAEA,OAAOlD,eAAe,CAACmC,MAAM,EAAE/B,OAAO,EAAEwC,YAAY,CAAC;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module"}