{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateFragmentNameMessage(fragName) {\n  return \"There can be only one fragment named \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\n\nexport function UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateFragmentNameMessage","fragName","concat","UniqueFragmentNames","context","knownFragmentNames","Object","create","OperationDefinition","FragmentDefinition","node","fragmentName","name","value","reportError"],"sources":["/Users/richa/Desktop/Projects/demo-project/store/bookstore-v2/node_modules/graphql/validation/rules/UniqueFragmentNames.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateFragmentNameMessage(fragName) {\n  return \"There can be only one fragment named \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\n\nexport function UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,OAAO,SAASC,4BAA4BA,CAACC,QAAQ,EAAE;EACrD,OAAO,yCAAyC,CAACC,MAAM,CAACD,QAAQ,EAAE,KAAK,CAAC;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,mBAAmBA,CAACC,OAAO,EAAE;EAC3C,IAAIC,kBAAkB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC5C,OAAO;IACLC,mBAAmB,EAAE,SAASA,mBAAmBA,CAAA,EAAG;MAClD,OAAO,KAAK;IACd,CAAC;IACDC,kBAAkB,EAAE,SAASA,kBAAkBA,CAACC,IAAI,EAAE;MACpD,IAAIC,YAAY,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK;MAElC,IAAIR,kBAAkB,CAACM,YAAY,CAAC,EAAE;QACpCP,OAAO,CAACU,WAAW,CAAC,IAAIf,YAAY,CAACC,4BAA4B,CAACW,YAAY,CAAC,EAAE,CAACN,kBAAkB,CAACM,YAAY,CAAC,EAAED,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC;MAClI,CAAC,MAAM;QACLP,kBAAkB,CAACM,YAAY,CAAC,GAAGD,IAAI,CAACE,IAAI;MAC9C;MAEA,OAAO,KAAK;IACd;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}